Description: Crear roles basicos de Control Tower de Soluciones Orion
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Roles de Soluciones Orion
        Parameters:
          - AccountIDOrigen
          - RolArquitecto
          - RolSSGG
          - RolCore
      - Label:
          default: CloudHealth
        Parameters:
          - RoleCloudHealth
          - AccountIDCloudHealth
          - AccountExternalIDCloudHealth
      - Label:
          default: Politica de contraseñas
        Parameters:
          - MaxPasswordAge
          - MinPasswordLength
          - PasswordHistory
          - RequireLowercaseChars
          - RequireNumbers
          - RequireSymbols
          - RequireUppercaseChars
    ParameterLabels:
      AccountIDOrigen:
        default: Cuenta origen de Soluciones Orion
      RolArquitecto:
        default: Support all resource types
      RolSSGG:
        default: Acceso Rol SSGG
      RolCore:
        default: Acceso Rol SSGG Core
      RoleCloudHealth:
        default: Acceso Rol CloudHealth
      AccountIDCloudHealth:
        default: ID requerido por CloudHealth
      AccountExternalIDCloudHealth:
        default: ID Externo requerido por CloudHealth
      MaxPasswordAge:
        default: Tiempo maximo de contraseñas
      MinPasswordLength:
        default: Minimo tamaño de la contraseñas
      PasswordHistory:
        default: Numero de contraseñas previas que recordar
      RequireLowercaseChars:
        default: Requiere al menos un caracter en minusculas
      RequireNumbers:
        default: Requiere al menos un numero
      RequireSymbols:
        default: Requiere al menos un simbolo
      RequireUppercaseChars:
        default: Requiere al menos un caracter en mayusculas   

Parameters:
  AccountIDOrigen:
    Type: String
    Default: 367349699662
  RolArquitecto:
    Type: String
    Default: SSOArquitectura-Asumed
  RolSSGG:
    Type: String
    Default: SSOSsgg-Asumed
  RolCore:
    Type: String
    Default: SSOCore-Asumed
  RoleCloudHealth:
    Type: String
    Default: CloudHealthRole
  AccountIDCloudHealth:
    Type: String
    Default: 454464851268
  AccountExternalIDCloudHealth:
    Type: String
  MaxPasswordAge:
    Type: 'Number'
    Default: 180
    ConstraintDescription: '(90-365 days)'
    MinValue: 90
    MaxValue: 365
  MinPasswordLength:
    Type: 'Number'
    Default: 8
    ConstraintDescription: '(8-128 characters)'
    MinValue: 8
    MaxValue: 128
  PasswordHistory:
    Type: 'Number'
    Default: 3
    ConstraintDescription: '(1-24 passwords)'
    MinValue: 1
    MaxValue: 24
  RequireLowercaseChars:
    Type: 'String'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireNumbers:
    Type: 'String'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireSymbols:
    Type: 'String'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireUppercaseChars:
    Type: 'String'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
Resources:
  MyRoleArquitecto:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AccountIDOrigen'
                  - ':root'
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: "/"
      RoleName: !Ref 'RolArquitecto'
  MyRoleSSGG:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AccountIDOrigen'
                  - ':root'
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Path: "/"
      RoleName: !Ref 'RolSSGG'
  MyRoleCore:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AccountIDOrigen'
                  - ':root'
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AWSSupportAccess"
      Path: "/"
      Policies:
        -
          PolicyName: "SSOCore-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "iam:UpdateLoginProfile"
                  - "ec2:StopInstances"
                  - "ec2:StartInstances"
                  - "ec2:RebootInstances"
                  - "ec2:CreateImage"
                  - "ec2:DescribeTags"
                  - "ec2:CreateTags"
                  - "ec2:CreateSnapshot"
                  - "ec2:DescribeSnapshots"
                  - "ec2:DescribeSnapshotAttribute"
                  - "ec2:AuthorizeSecurityGroupEgress"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupEgress"
                  - "ec2:RevokeSecurityGroupIngress"
                  - "rds:StopDBInstance"
                  - "rds:StartDBInstance"
                  - "rds:RebootDBInstance"
                  - "rds:CreateDBSnapshot"
                  - "rds:AddTagsToResource"
                  - "rds:DescribeDBSnapshots"
                  - "rds:DescribeDBClusters"
                  - "rds:DescribeDBClusterSnapshotAttributes"
                  - "rds:AuthorizeDBSecurityGroupIngress"
                  - "rds:RevokeDBSecurityGroupIngress"
                Resource: "*"

      RoleName: !Ref 'RolCore'
  MyRoleCloudHealth:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AccountIDCloudHealth'
                  - ':root'
            Action: 
              - "sts:AssumeRole"
            Condition: 
              StringEquals:
                sts:ExternalId: !Ref 'AccountExternalIDCloudHealth'
      Path: "/"
      Policies:
        -
          PolicyName: "CloudHealth-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                - "autoscaling:Describe*"
                - "aws-portal:ViewBilling"
                - "aws-portal:ViewUsage"
                - "cloudformation:ListStacks"
                - "cloudformation:ListStackResources"
                - "cloudformation:DescribeStacks"
                - "cloudformation:DescribeStackEvents"
                - "cloudformation:DescribeStackResources"
                - "cloudformation:GetTemplate"
                - "cloudfront:Get*"
                - "cloudfront:List*"
                - "cloudtrail:DescribeTrails"
                - "cloudtrail:GetEventSelectors"
                - "cloudtrail:ListTags"
                - "cloudwatch:Describe*"
                - "cloudwatch:Get*"
                - "cloudwatch:List*"
                - "config:Get*"
                - "config:Describe*"
                - "config:Deliver*"
                - "config:List*"
                - "cur:Describe*"
                - "dms:Describe*"
                - "dms:List*"
                - "dynamodb:DescribeTable"
                - "dynamodb:List*"
                - "ec2:Describe*"
                - "ec2:GetReservedInstancesExchangeQuote"
                - "ecs:List*"
                - "ecs:Describe*"
                - "elasticache:Describe*"
                - "elasticache:ListTagsForResource"
                - "elasticbeanstalk:Check*"
                - "elasticbeanstalk:Describe*"
                - "elasticbeanstalk:List*"
                - "elasticbeanstalk:RequestEnvironmentInfo"
                - "elasticbeanstalk:RetrieveEnvironmentInfo"
                - "elasticfilesystem:Describe*"
                - "elasticloadbalancing:Describe*"
                - "elasticmapreduce:Describe*"
                - "elasticmapreduce:List*"
                - "es:List*"
                - "es:Describe*"
                - "firehose:ListDeliveryStreams"
                - "firehose:DescribeDeliveryStream"
                - "iam:List*"
                - "iam:Get*"
                - "iam:GenerateCredentialReport"
                - "kinesis:Describe*"
                - "kinesis:List*"
                - "kms:DescribeKey"
                - "kms:GetKeyRotationStatus"
                - "kms:ListKeys"
                - "lambda:List*"
                - "logs:Describe*"
                - "redshift:Describe*"
                - "route53:Get*"
                - "route53:List*"
                - "rds:Describe*"
                - "rds:ListTagsForResource"
                - "s3:GetBucketAcl"
                - "s3:GetBucketLocation"
                - "s3:GetBucketLogging"
                - "s3:GetBucketPolicy"
                - "s3:GetBucketTagging"
                - "s3:GetBucketVersioning"
                - "s3:GetBucketWebsite"
                - "s3:List*"
                - "sagemaker:Describe*"
                - "sagemaker:List*"
                - "sdb:GetAttributes"
                - "sdb:List*"
                - "ses:Get*"
                - "ses:List*"
                - "sns:Get*"
                - "sns:List*"
                - "sqs:GetQueueAttributes"
                - "sqs:ListQueues"
                - "storagegateway:List*"
                - "storagegateway:Describe*"
                - "workspaces:Describe*"
                Resource: "*"
      RoleName: !Ref 'RoleCloudHealth'  
  IAMPasswordPolicy:
    Type: 'Custom::IAMPolicyResource'
    Properties:
      ServiceToken: !GetAtt IAMPasswordPolicyResource.Arn
      Region: !Ref "AWS::Region"
  IAMPasswordPolicyResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt IAMPasswordPolicyResourceExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          # Lambda entry point
          def lambda_handler(event, context):
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          def update_policy():
            try:
              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=True,
                  HardExpiry=False,
                  MaxPasswordAge=${MaxPasswordAge},
                  MinimumPasswordLength=${MinPasswordLength},
                  RequireLowercaseCharacters=${RequireLowercaseChars},
                  RequireNumbers=${RequireNumbers},
                  RequireSymbols=${RequireSymbols},
                  RequireUppercaseCharacters=${RequireUppercaseChars},
                  PasswordReusePrevention=${PasswordHistory})
              return(True, response)
            except Exception as e:
              return (False, "Cannot update policy: " + str(e))
          def delete_policy():
            try:
              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, "Cannot delete policy: " + str(e))
  IAMPasswordPolicyResourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: IAMPasswordCreatorPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          # lambdas like to log stuff..
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          # core permissions for this function
          - Effect: Allow
            Action:
              - iam:GetAccountPasswordPolicy
              - iam:UpdateAccountPasswordPolicy
              - iam:DeleteAccountPasswordPolicy
            Resource: "*"
Outputs:
  Roles:
    Description: Roles de Segurizacion de Soluciones Orion
    Value: "Roles Soluciones Orion SSOArquitectura-Asumed, SSOSsgg-Asumed, SSOCore-Asumed para acceder desde la cuenta 367349699662"


  

